/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include "stm32f4xx.h"
			
static void prvSetupHardware(void);
static void prvSetupUART1(void);
static void printmsg(char *msg);


int main(void)
{
	//1.Reset the RCC clock configuration
		//HSI ON, PLL OFF, HSE OFF , system clock= 16MHz, cpu_clock=16MHz
		RCC_DeInit();

		//2.Update the sys clock, make sys clock point to HSI
		SystemCoreClockUpdate();

		//call hardware setup
		prvSetupHardware();


		printmsg("Hello world");

		for(;;);

}


static void prvSetupHardware(void)
{


	//setup UART1
	prvSetupUART1();

}

/*
 *   BASIC FUNCTIONS
 */
static void printmsg(char *msg)
{
	for(int i=0;i< strlen(msg);i++)
	{
		//wait untill DR empty
		while(!USART_GetFlagStatus(USART2,USART_FLAG_TXE));
		USART_SendData(USART2,msg[i]);
	}
}

static void prvSetupUART1(void)
{
	//1.Enable UART1 peripheral clock and GPIO portA
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);

		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);

		//USART pins PA2-Rx ,PA3-Tx

		//2.Alternate function configuration of MCU pins to behave as USART2 RX and TX

			// lets first initialize GPIO pins
			//populate GPIO init structure and then pass
			GPIO_InitTypeDef gpio_uart_pins;

			//GPIO PA2 and PA3
			memset(&gpio_uart_pins,0,sizeof(gpio_uart_pins));//setting all struct member elements to 0
			gpio_uart_pins.GPIO_Pin=GPIO_Pin_9 | GPIO_Pin_10;
			gpio_uart_pins.GPIO_Mode=GPIO_Mode_AF;
			gpio_uart_pins.GPIO_PuPd= GPIO_PuPd_UP; // USART initial state is UP
			GPIO_Init(GPIOA,&gpio_uart_pins);

			//AF mode setting for pins
			GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART2);// now PA9 is tx
			GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART2);// now PA10 is rx

		//3.UART peripheral configuration
			USART_InitTypeDef usart_peri_init;
			memset(&usart_peri_init,0,sizeof(usart_peri_init));//setting all struct member elements to 0
			usart_peri_init.USART_BaudRate=9600;
			usart_peri_init.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
			usart_peri_init.USART_Mode=  USART_Mode_Tx | USART_Mode_Rx;
			usart_peri_init.USART_Parity=USART_Parity_No;
			usart_peri_init.USART_StopBits=USART_StopBits_1;
			usart_peri_init.USART_WordLength=USART_WordLength_8b;
			USART_Init(USART1,&usart_peri_init);

		//4.Enable UART2 byte reception interrupt(there are many other interrupts)
			USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);

		//Lets set NVIC priority of USART2
			NVIC_SetPriority(USART1_IRQn,5);

		//enable the USART2 IRQ in the NVIC
			NVIC_EnableIRQ(USART1_IRQn);

		//5.Enable USART2 peripheral
			USART_Cmd(USART1,ENABLE);

}


void USART1_IRQHandler(void)
{
	uint16_t data_byte;

	if( USART_GetFlagStatus(USART1,USART_FLAG_RXNE) )
	{
		//a data byte is received from the user
	   data_byte = USART_ReceiveData(USART1);
	   if(data_byte != 0)
	   		{

		     printmsg("\nlol");
	   		}
	}

}

